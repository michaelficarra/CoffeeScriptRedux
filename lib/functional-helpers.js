// Generated by CoffeeScript 2.0.0-beta9-dev
var concat, foldl, map, nub, span;
module.exports = {
  any: function (list, fn) {
    var e;
    for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
      e = list[i$];
      if (fn(e)) {
        return true;
      }
    }
    return false;
  },
  all: function (list, fn) {
    var e;
    for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
      e = list[i$];
      if (!fn(e)) {
        return false;
      }
    }
    return true;
  },
  find: function (list, fn) {
    var e;
    for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
      e = list[i$];
      if (fn(e)) {
        return e;
      }
    }
    return null;
  },
  foldl: foldl = function (memo, list, fn) {
    var i;
    for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
      i = list[i$];
      memo = fn(memo, i);
    }
    return memo;
  },
  foldl1: function (list, fn) {
    return foldl(list[0], list.slice(1), fn);
  },
  map: map = function (list, fn) {
    var e;
    return function (accum$) {
      for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
        e = list[i$];
        accum$.push(fn(e));
      }
      return accum$;
    }.call(this, []);
  },
  concat: concat = function (list) {
    var cache$;
    return (cache$ = []).concat.apply(cache$, [].slice.call(list));
  },
  concatMap: function (list, fn) {
    return concat(map(list, fn));
  },
  intersect: function (listA, listB) {
    var a;
    return function (accum$) {
      for (var i$ = 0, length$ = listA.length; i$ < length$; ++i$) {
        a = listA[i$];
        if (!in$(a, listB))
          continue;
        accum$.push(a);
      }
      return accum$;
    }.call(this, []);
  },
  difference: function (listA, listB) {
    var a;
    return function (accum$) {
      for (var i$ = 0, length$ = listA.length; i$ < length$; ++i$) {
        a = listA[i$];
        if (!!in$(a, listB))
          continue;
        accum$.push(a);
      }
      return accum$;
    }.call(this, []);
  },
  nub: nub = function (list) {
    var i, result;
    result = [];
    for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
      i = list[i$];
      if (!!in$(i, result))
        continue;
      result.push(i);
    }
    return result;
  },
  union: function (listA, listB) {
    var b;
    return listA.concat(function (accum$) {
      for (var cache$ = nub(listB), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
        b = cache$[i$];
        if (!!in$(b, listA))
          continue;
        accum$.push(b);
      }
      return accum$;
    }.call(this, []));
  },
  flip: function (fn) {
    return function (b, a) {
      return fn.call(this, a, b);
    };
  },
  owns: function (hop) {
    return function (a, b) {
      return hop.call(a, b);
    };
  }({}.hasOwnProperty),
  span: span = function (list, f) {
    var cache$, ys, zs;
    if (list.length === 0) {
      return [
        [],
        []
      ];
    } else if (f(list[0])) {
      cache$ = span(list.slice(1), f);
      ys = cache$[0];
      zs = cache$[1];
      return [
        [list[0]].concat([].slice.call(ys)),
        zs
      ];
    } else {
      return [
        [],
        list
      ];
    }
  },
  divMod: function (a, b) {
    var c, div, mod;
    c = a % b;
    mod = c < 0 ? c + b : c;
    div = Math.floor(a / b);
    return [
      div,
      mod
    ];
  },
  partition: function (list, fn) {
    var item, result;
    result = [
      [],
      []
    ];
    for (var i$ = 0, length$ = list.length; i$ < length$; ++i$) {
      item = list[i$];
      result[+!fn(item)].push(item);
    }
    return result;
  },
  zip: function (listA, listB) {
    var i, len;
    len = Math.max(listA.length, listB.length);
    return function (accum$) {
      for (var cache$ = function () {
            var accum$1;
            accum$1 = [];
            for (var i$ = 0; 0 <= len ? i$ < len : i$ > len; 0 <= len ? ++i$ : --i$)
              accum$1.push(i$);
            return accum$1;
          }.apply(this, arguments), i$ = 0, length$ = cache$.length; i$ < length$; ++i$) {
        i = cache$[i$];
        accum$.push([
          listA[i],
          listB[i]
        ]);
      }
      return accum$;
    }.call(this, []);
  }
};
function in$(member, list) {
  for (var i = 0, length = list.length; i < length; ++i)
    if (i in list && list[i] === member)
      return true;
  return false;
}
